import { InsertDataPost, KfParseJsonDataContract } from './kfarch-job.interface';
import { KfArchInsertDataEntity } from './kfarch-job.entity';

export const definedOr = (value, orValue) => (typeof value === 'undefined' ? orValue : value);

export const getRandomNumber = (min: number = 1, max: number = 100) => Math.round(Math.random() * (max - min));

export const getRandomString = (opts?: object) => {
    const { min, max, dict } = Object.assign(
        {
            min: 0,
            max: 100,
            dict: 'abcdefghijklmnopqrstuvwxyz0123456789',
        },
        definedOr(opts, {}),
    );
    const e = '';
    const dl = Math.max(0, dict.length - 1);
    return dl
        ? Array(min + getRandomNumber(min, max))
              .fill(e)
              .reduce((a) => a + dict[getRandomNumber(0, dl)], e)
        : e;
};

export const createN = (cb, min?: number, max?: number) => new Array(getRandomNumber(min, max)).fill('').map((_, i) => cb(i));

const getNextNumber = (
    (base) => (): number =>
        base++
)(new Date().getTime());

export const getNumber = (): number => getNextNumber();
export const getString = (): string => getNextNumber().toString(36);
export const getDate = (): Date => new Date(getNextNumber());
export const getBoolean = (): boolean => Boolean(getNextNumber() % 2);

export const getRandomEmptyString = (): string => getRandomString({ dict: '  \r\t\n' });

export const getKfParseJsonDataContract = (): KfParseJsonDataContract => ({
    jobID: getNumber(),
    OverallRationale: getString(),
    jobTitle: getString(),
    jobCode: getString(),
    hideInPM: getNumber(),
    jobStatus: getString(),
    function: getString(),
    subFunction: getString(),
    khPracticalTechnicalKnowledge: getString(),
    khManagerialKnowledge: getString(),
    khCommunicationInfluencingSkill: getBoolean() ? getString() : getNumber(),
    khPoints: getNumber(),
    khRationales: getString(),
    psFreedomThink: getString(),
    psThinkingChallenge: getString(),
    psPercentage: getString(),
    psPoints: getNumber(),
    psRationales: getString(),
    acFreedomAct: getString(),
    acAreaImpact: getString(),
    acNatureImpact: getString(),
    acPoints: getNumber(),
    acRationales: getString(),
    wcPhysicalEffort: getString(),
    wcPhysicalEnvironment: getString(),
    wcSensoryAttention: getString(),
    wcMentalStress: getString(),
    wcPoints: getNumber(),
    wcRationale: getString(),
    kfHayPoints: getNumber(),
    gradeSet: getString(),
    grade: getString(),
    shortProfile: getString(),
    benchmarkIndicator: getBoolean(),
    dynProp0: getString(),
    dynProp1: getString(),
    dynProp2: getString(),
    dynProp3: getString(),
    dynProp4: getString(),
    dynProp5: getString(),
    dynProp6: getString(),
    dynProp7: getString(),
    dynProp8: getString(),
    dynProp9: getString(),
    dynProp10: getString(),
    dynProp11: getString(),
    dynProp12: getString(),
    dynProp13: getString(),
    dynProp14: getString(),
    dynProp15: getString(),
    dynProp16: getString(),
    dynProp17: getString(),
    dynProp18: getString(),
    dynProp19: getString(),
    dynProp20: getString(),
    dynProp21: getString(),
    dynProp22: getString(),
    dynProp23: getString(),
    dynProp24: getString(),
    dynProp25: getString(),
    dynProp26: getString(),
    dynProp27: getString(),
    dynProp28: getString(),
    dynProp29: getString(),
    dynProp30: getString(),
    dynProp31: getString(),
    dynProp32: getString(),
    dynProp33: getString(),
    dynProp34: getString(),
    dynProp35: getString(),
    dynProp36: getString(),
    dynProp37: getString(),
    dynProp38: getString(),
    dynProp39: getString(),
    dynProp40: getString(),
    createdDate: getDate(),
    createdBy: getString(),
    lastUpdateDate: getDate(),
    lastUpdatedBy: getString(),
    dynPropId0: getNumber(),
    dynPropId1: getNumber(),
    dynPropId2: getNumber(),
    dynPropId3: getNumber(),
    dynPropId4: getNumber(),
    dynPropId5: getNumber(),
    dynPropId6: getNumber(),
    dynPropId7: getNumber(),
    dynPropId8: getNumber(),
    dynPropId9: getNumber(),
    dynPropId10: getNumber(),
    dynPropId11: getNumber(),
    dynPropId12: getNumber(),
    dynPropId13: getNumber(),
    dynPropId14: getNumber(),
    dynPropId15: getNumber(),
    dynPropId16: getNumber(),
    dynPropId17: getNumber(),
    dynPropId18: getNumber(),
    dynPropId19: getNumber(),
    dynPropId20: getNumber(),
    dynPropId21: getNumber(),
    dynPropId22: getNumber(),
    dynPropId23: getNumber(),
    dynPropId24: getNumber(),
    dynPropId25: getNumber(),
    dynPropId26: getNumber(),
    dynPropId27: getNumber(),
    dynPropId28: getNumber(),
    dynPropId29: getNumber(),
    dynPropId30: getNumber(),
    dynPropId31: getNumber(),
    dynPropId32: getNumber(),
    dynPropId33: getNumber(),
    dynPropId34: getNumber(),
    dynPropId35: getNumber(),
    dynPropId36: getNumber(),
    dynPropId37: getNumber(),
    dynPropId38: getNumber(),
    dynPropId39: getNumber(),
    dynPropId40: getNumber(),
    CalcKnowHowPoints: getNumber(),
    CalcProblemSolvingPoints: getNumber(),
    CalcAccountabilityPoints: getNumber(),
    CalcWorkingConditionsPoints: getNumber(),
    CalcShortProfile: getString(),
    CalcKFHayPoints: getNumber(),
    CalcGrade: getNumber(),
    gradeOverride: getBoolean(),
});

export const getKfArchInsertDataEntity = (): KfArchInsertDataEntity => ({
    KFArchitectProfilesUpdateID: getNumber(),
    OverallRationale: getString(),
    ProfileRecordID: getNumber(),
    ClientJobID: getNumber(),
    JobName: getString(),
    ClientJobCode: getString(),
    HideInPM: getNumber(),
    ClientJobStatus: getString(),
    ClientJobFunctionName: getString(),
    ClientJobSubFunctionName: getString(),
    KnowHowScores: getString(),
    KnowHowPoints: getNumber(),
    KnowHowRationale: getString(),
    ProblemSolvingScores: getString(),
    ProblemSolvingPercentage: getString(),
    ProblemSolvingPoints: getNumber(),
    ProblemSolvingRationale: getString(),
    AccountabilityScores: getString(),
    AccountabilityPoints: getNumber(),
    AccountabilityRationale: getString(),
    WorkingConditionsScores: getString(),
    WorkingConditionsPoints: getNumber(),
    WorkingConditionsRationale: getString(),
    KFHayPoints: getNumber(),
    GradeSetName: getString(),
    Grade: getString(),
    ShortProfile: getString(),
    BenchmarkIndicator: getBoolean(),
    CreatedOn: getDate(),
    CreatedBy: getNumber(),
    CalcKnowHowPoints: getNumber(),
    CalcProblemSolvingPoints: getNumber(),
    CalcAccountabilityPoints: getNumber(),
    CalcWorkingConditionsPoints: getNumber(),
    CalcKFHayPoints: getNumber(),
    CalcGrade: getNumber(),
    CalcShortProfile: getString(),
    JP1_ID: getNumber(),
    JP1_Value: getString(),
    JP2_ID: getNumber(),
    JP2_Value: getString(),
    JP3_ID: getNumber(),
    JP3_Value: getString(),
    JP4_ID: getNumber(),
    JP4_Value: getString(),
    JP5_ID: getNumber(),
    JP5_Value: getString(),
    JP6_ID: getNumber(),
    JP6_Value: getString(),
    JP7_ID: getNumber(),
    JP7_Value: getString(),
    JP8_ID: getNumber(),
    JP8_Value: getString(),
    JP9_ID: getNumber(),
    JP9_Value: getString(),
    JP10_ID: getNumber(),
    JP10_Value: getString(),
    JP11_ID: getNumber(),
    JP11_Value: getString(),
    JP12_ID: getNumber(),
    JP12_Value: getString(),
    JP13_ID: getNumber(),
    JP13_Value: getString(),
    JP14_ID: getNumber(),
    JP14_Value: getString(),
    JP15_ID: getNumber(),
    JP15_Value: getString(),
    JP16_ID: getNumber(),
    JP16_Value: getString(),
    JP17_ID: getNumber(),
    JP17_Value: getString(),
    JP18_ID: getNumber(),
    JP18_Value: getString(),
    JP19_ID: getNumber(),
    JP19_Value: getString(),
    JP20_ID: getNumber(),
    JP20_Value: getString(),
    JP21_ID: getNumber(),
    JP21_Value: getString(),
    JP22_ID: getNumber(),
    JP22_Value: getString(),
    JP23_ID: getNumber(),
    JP23_Value: getString(),
    JP24_ID: getNumber(),
    JP24_Value: getString(),
    JP25_ID: getNumber(),
    JP25_Value: getString(),
    JP26_ID: getNumber(),
    JP26_Value: getString(),
    JP27_ID: getNumber(),
    JP27_Value: getString(),
    JP28_ID: getNumber(),
    JP28_Value: getString(),
    JP29_ID: getNumber(),
    JP29_Value: getString(),
    JP30_ID: getNumber(),
    JP30_Value: getString(),
    JP31_ID: getNumber(),
    JP31_Value: getString(),
    JP32_ID: getNumber(),
    JP32_Value: getString(),
    JP33_ID: getNumber(),
    JP33_Value: getString(),
    JP34_ID: getNumber(),
    JP34_Value: getString(),
    JP35_ID: getNumber(),
    JP35_Value: getString(),
    JP36_ID: getNumber(),
    JP36_Value: getString(),
    JP37_ID: getNumber(),
    JP37_Value: getString(),
    JP38_ID: getNumber(),
    JP38_Value: getString(),
    JP39_ID: getNumber(),
    JP39_Value: getString(),
    JP40_ID: getNumber(),
    JP40_Value: getString(),
    JP41_ID: getNumber(),
    JP41_Value: getString(),
    GradeOverride: getBoolean(),
});

export const getInsertDataPost = (): InsertDataPost => ({
    fileKey: getString(),
    fileUUID: getString(),
});
